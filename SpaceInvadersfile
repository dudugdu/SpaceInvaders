#!/usr/bin/env python

from pygame import *
import sys
from os.path import abspath, dirname
from random import choice
import header

BASE_PATH = abspath(dirname(__file__))
FONT_PATH = BASE_PATH + '/fonts/'
IMAGE_PATH = BASE_PATH + '/images/'
SOUND_PATH = BASE_PATH + '/sounds/'

# Cores (R, G, B)
BRANCO = (255, 255, 255)
VERDE = (78, 255, 87)
AMARELO = (241, 255, 0)
AZUL = (80, 255, 239)
ROXO = (203, 0, 255)
VERMELHO = (237, 28, 36)

TELA = display.set_mode((800, 600))
FONT = FONT_PATH + 'space_invaders.ttf'
IMG_NAMES = ['nave', 'mystery', 'inimigo1_1', 'inimigo1_2', 'inimigo2_1', 'inimigo2_2', 'inimigo3_1', 'inimigo3_2', 'explosaoazul', 'explosaoverde', 'explosaoroxo', 'laser', 'inimigolaser']
IMAGES = {name: image.load(IMAGE_PATH + '{}.png'.format(name)).convert_alpha() for name in IMG_NAMES}

BLOQUEADORES_POSICAO = 450
POSICAO_PADRAO_INIMIGO = 65
INIMIGO_MOVE_BAIXO = 35

class Nave(sprite.Sprite):
    def __init__(self):
        sprite.Sprite.__init__(self)
        self.image = header.IMAGES['nave']
        self.rect = self.image.get_rect(topleft=(375, 540))
        self.velocidade = 5

    def update(self, keys, *args):
        if keys[K_LEFT] and self.rect.x > 10:
            self.rect.x -= self.velocidade
        if keys[K_RIGHT] and self.rect.x < 740:
            self.rect.x += self.velocidade
        game.tela.blit(self.image, self.rect)

class Tiro(sprite.Sprite):
    def __init__(self, xpos, ypos, direcao, velocidade, filename, side):
        sprite.Sprite.__init__(self)
        self.image = header.IMAGES[filename]
        self.rect = self.image.get_rect(topleft=(xpos, ypos))
        self.velocidade = velocidade
        self.direcao = direcao
        self.side = side
        self.filename = filename

    def update(self, keys, *args):
        game.tela.blit(self.image, self.rect)
        self.rect.y += self.velocidade * self.direcao
        if self.rect.y < 15 or self.rect.y > 600:
            self.kill()

class Inimigo(sprite.Sprite):
    def __init__(self, linha, coluna):
        sprite.Sprite.__init__(self)
        self.linha = linha
        self.coluna = coluna
        self.images = []
        self.load_images()
        self.index = 0
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()

    def toggle_image(self):
        self.index += 1
        if self.index >= len(self.images):
            self.index = 0
        self.image = self.images[self.index]

    def update(self, *args):
        game.tela.blit(self.image, self.rect)

    def load_images(self):
        images = {0: ['1_2', '1_1'], 1: ['2_2', '2_1'], 2: ['2_2', '2_1'], 3: ['3_1', '3_2'], 4: ['3_1', '3_2']}
        img1, img2 = (header.IMAGES['inimigo{}'.format(img_num)] for img_num in images[self.linha])
        self.images.append(transform.scale(img1, (40, 35)))
        self.images.append(transform.scale(img2, (40, 35)))


class GrupoInimigos(sprite.Group):
    def __init__(self, colunas, linhas):
        sprite.Group.__init__(self)
        self.enemies = [[None] * colunas for _ in range(linhas)]
        self.colunas = colunas
        self.linhas = linhas
        self.leftAddMove = 0
        self.rightAddMove = 0
        self.moveTime = 600
        self.direcao = 1
        self.rightMoves = 30
        self.leftMoves = 30
        self.moveNumber = 15
        self.timer = time.get_ticks()
        self.bottom = game.inimigoPosition + ((linhas - 1) * 45) + 35
        self._aliveColumns = list(range(colunas))
        self._leftAliveColumn = 0
        self._rightAliveColumn = colunas - 1

    def update(self, current_time):
        if current_time - self.timer > self.moveTime:
            if self.direcao == 1:
                max_move = self.rightMoves + self.rightAddMove
            else:
                max_move = self.leftMoves + self.leftAddMove

            if self.moveNumber >= max_move:
                self.leftMoves = 30 + self.rightAddMove
                self.rightMoves = 30 + self.leftAddMove
                self.direcao *= -1
                self.moveNumber = 0
                self.bottom = 0
                for inimigo in self:
                    inimigo.rect.y += header.INIMIGO_MOVE_BAIXO
                    inimigo.toggle_image()
                    if self.bottom < inimigo.rect.y + 35:
                        self.bottom = inimigo.rect.y + 35
            else:
                velocity = 10 if self.direcao == 1 else -10
                for inimigo in self:
                    inimigo.rect.x += velocity
                    inimigo.toggle_image()
                self.moveNumber += 1

            self.timer += self.moveTime

    def add_internal(self, *sprites):
        super(GrupoInimigos, self).add_internal(*sprites)
        for s in sprites:
            self.enemies[s.linha][s.coluna] = s

    def remove_internal(self, *sprites):
        super(GrupoInimigos, self).remove_internal(*sprites)
        for s in sprites:
            self.kill(s)
        self.update_velocidade()

    def is_coluna_dead(self, coluna):
        return not any(self.enemies[linha][coluna] for linha in range(self.linhas))

    def random_bottom(self):
        col = choice(self._aliveColumns)
        col_enemies = (self.enemies[linha - 1][col] for linha in range(self.linhas, 0, -1))
        return next((en for en in col_enemies if en is not None), None)

    def update_velocidade(self):
        if len(self) == 1:
            self.moveTime = 200
        elif len(self) <= 10:
            self.moveTime = 400

    def kill(self, inimigo):
        self.enemies[inimigo.linha][inimigo.coluna] = None
        is_coluna_dead = self.is_coluna_dead(inimigo.coluna)
        if is_coluna_dead:
            self._aliveColumns.remove(inimigo.coluna)

        if inimigo.coluna == self._rightAliveColumn:
            while self._rightAliveColumn > 0 and is_coluna_dead:
                self._rightAliveColumn -= 1
                self.rightAddMove += 5
                is_coluna_dead = self.is_coluna_dead(self._rightAliveColumn)

        elif inimigo.coluna == self._leftAliveColumn:
            while self._leftAliveColumn < self.colunas and is_coluna_dead:
                self._leftAliveColumn += 1
                self.leftAddMove += 5
                is_coluna_dead = self.is_coluna_dead(self._leftAliveColumn)


class Bloqueador(sprite.Sprite):
    def __init__(self, size, color, linha, coluna):
        sprite.Sprite.__init__(self)
        self.height = size
        self.width = size
        self.color = color
        self.image = Surface((self.width, self.height))
        self.image.fill(self.color)
        self.rect = self.image.get_rect()
        self.linha = linha
        self.coluna = coluna

    def update(self, keys, *args):
        game.tela.blit(self.image, self.rect)


class Mystery(sprite.Sprite):
    def __init__(self):
        sprite.Sprite.__init__(self)
        self.image = header.IMAGES['mystery']
        self.image = transform.scale(self.image, (75, 35))
        self.rect = self.image.get_rect(topleft=(-80, 45))
        self.linha = 5
        self.moveTime = 25000
        self.direcao = 1
        self.timer = time.get_ticks()
        self.mysteryEntered = mixer.Sound(header.SOUND_PATH + 'mysteryentered.wav')
        self.mysteryEntered.set_volume(0.3)
        self.playSound = True

    def update(self, keys, currentTime, *args):
        resetTimer = False
        passed = currentTime - self.timer
        if passed > self.moveTime:
            if (self.rect.x < 0 or self.rect.x > 800) and self.playSound:
                self.mysteryEntered.play()
                self.playSound = False
            if self.rect.x < 840 and self.direcao == 1:
                self.mysteryEntered.fadeout(4000)
                self.rect.x += 2
                game.tela.blit(self.image, self.rect)
            if self.rect.x > -100 and self.direcao == -1:
                self.mysteryEntered.fadeout(4000)
                self.rect.x -= 2
                game.tela.blit(self.image, self.rect)

        if self.rect.x > 830:
            self.playSound = True
            self.direcao = -1
            resetTimer = True
        if self.rect.x < -90:
            self.playSound = True
            self.direcao = 1
            resetTimer = True
        if passed > self.moveTime and resetTimer:
            self.timer = currentTime


class InimigoExplosao(sprite.Sprite):
    def __init__(self, inimigo, *groups):
        super(InimigoExplosao, self).__init__(*groups)
        self.image = transform.scale(self.get_image(inimigo.linha), (40, 35))
        self.image2 = transform.scale(self.get_image(inimigo.linha), (50, 45))
        self.rect = self.image.get_rect(topleft=(inimigo.rect.x, inimigo.rect.y))
        self.timer = time.get_ticks()
# Pedimos ajuda aqui
    @staticmethod
    def get_image(linha):
        img_colors = ['roxo', 'azul', 'azul', 'verde', 'verde']
        return header.IMAGES['explosao{}'.format(img_colors[linha])]

    def update(self, current_time, *args):
        passed = current_time - self.timer
        if passed <= 100:
            game.tela.blit(self.image, self.rect)
        elif passed <= 200:
            game.tela.blit(self.image2, (self.rect.x - 6, self.rect.y - 6))
        elif 400 < passed:
            self.kill()

class MisterioExplosao(sprite.Sprite):
    def __init__(self, mystery, score, *groups):
        super(MisterioExplosao, self).__init__(*groups)
        self.text = Text(header.FONT, 20, str(score), header.BRANCO, mystery.rect.x + 20, mystery.rect.y + 6)
        self.timer = time.get_ticks()

    def update(self, current_time, *args):
        passed = current_time - self.timer
        if passed <= 200 or 400 < passed <= 600:
            self.text.draw(game.tela)
        elif 600 < passed:
            self.kill()


class NaveExplosao(sprite.Sprite):
    def __init__(self, nave, *groups):
        super(NaveExplosao, self).__init__(*groups)
        self.image = header.IMAGES['nave']
        self.rect = self.image.get_rect(topleft=(nave.rect.x, nave.rect.y))
        self.timer = time.get_ticks()

    def update(self, current_time, *args):
        passed = current_time - self.timer
        if 300 < passed <= 600:
            game.tela.blit(self.image, self.rect)
        elif 900 < passed:
            self.kill()


class Vida(sprite.Sprite):
    def __init__(self, xpos, ypos):
        sprite.Sprite.__init__(self)
        self.image = header.IMAGES['nave']
        self.image = transform.scale(self.image, (23, 23))
        self.rect = self.image.get_rect(topleft=(xpos, ypos))

    def update(self, *args):
        game.tela.blit(self.image, self.rect)


class Text(object):
    def __init__(self, textFont, size, message, color, xpos, ypos):
        self.font = font.Font(textFont, size)
        self.surface = self.font.render(message, True, color)
        self.rect = self.surface.get_rect(topleft=(xpos, ypos))

    def draw(self, surface):
        surface.blit(self.surface, self.rect)

class SpaceInvaders(object):
    def __init__(self):
        mixer.pre_init(44100, -16, 1, 4096)
        init()
        self.clock = time.Clock()
        self.caption = display.set_caption('Space Invaders')
        self.tela = header.TELA
        self.fundo = image.load(header.IMAGE_PATH + 'fundo.jpg').convert()
        self.startGame = False
        self.mainScreen = True
        self.gameOver = False

        self.inimigoPosition = header.POSICAO_PADRAO_INIMIGO
        self.titleText = Text(header.FONT, 50, 'Space Invaders', header.BRANCO, 184, 155)
        self.titleText2 = Text(header.FONT, 25, 'Pressione qualquer tecla para iniciar', header.BRANCO, 130, 225)
        self.textoGameOver = Text(header.FONT, 50, 'Voce Perdeu :(', header.BRANCO, 250, 270)
        self.nextRoundText = Text(header.FONT, 50, 'Proxima Rodada', header.BRANCO, 240, 270)
        self.inimigo1Text = Text(header.FONT, 25, '   =   10 pts', header.VERDE, 368, 270)
        self.inimigo2Text = Text(header.FONT, 25, '   =  20 pts', header.AZUL, 368, 320)
        self.inimigo3Text = Text(header.FONT, 25, '   =  30 pts', header.VERMELHO, 368, 370)
        self.inimigo4Text = Text(header.FONT, 25, '   =  ?????', header.VERMELHO, 368, 420)
        self.scoreText = Text(header.FONT, 20, 'Pts', header.BRANCO, 5, 5)
        self.livesText = Text(header.FONT, 20, 'Vidas ', header.BRANCO, 640, 5)

        self.life1 = Vida(715, 3)
        self.life2 = Vida(742, 3)
        self.life3 = Vida(769, 3)
        self.livesGroup = sprite.Group(self.life1, self.life2, self.life3)

    def reset(self, score):
        self.player = Nave()
        self.playerGroup = sprite.Group(self.player)
        self.explosaosGroup = sprite.Group()
        self.bullets = sprite.Group()
        self.mysteryNave = Mystery()
        self.mysteryGroup = sprite.Group(self.mysteryNave)
        self.inimigoTiros = sprite.Group()
        self.construi_inimigos()
        self.allSprites = sprite.Group(self.player, self.enemies, self.livesGroup, self.mysteryNave)
        self.keys = key.get_pressed()

        self.timer = time.get_ticks()
        self.noteTimer = time.get_ticks()
        self.naveTimer = time.get_ticks()
        self.score = score
        self.cria_audio()
        self.construiNovaNave = False
        self.naveAtiva = True

    def cria_bloqueadores(self, number):
        blockerGroup = sprite.Group()
        for linha in range(4):
            for coluna in range(9):
                blocker = Bloqueador(10, header.VERDE, linha, coluna)
                blocker.rect.x = 50 + (200 * number) + (coluna * blocker.width)
                blocker.rect.y = header.BLOQUEADORES_POSICAO + (linha * blocker.height)
                blockerGroup.add(blocker)
        return blockerGroup

    def cria_audio(self):
        self.sounds = {}
        for sound_name in ['shoot', 'shoot2', 'invaderkilled', 'mysterykilled', 'naveexplosao']:
            self.sounds[sound_name] = mixer.Sound(header.SOUND_PATH + '{}.wav'.format(sound_name))
            self.sounds[sound_name].set_volume(0.2)

        self.musicNotes = [mixer.Sound(header.SOUND_PATH + '{}.wav'.format(i)) for i in range(4)]
        for sound in self.musicNotes:
            sound.set_volume(0.5)

        self.noteIndex = 0

    def musica_principal(self, currentTime):
        if currentTime - self.noteTimer > self.enemies.moveTime:
            self.note = self.musicNotes[self.noteIndex]
            if self.noteIndex < 3:
                self.noteIndex += 1
            else:
                self.noteIndex = 0

            self.note.play()
            self.noteTimer += self.enemies.moveTime
# Pedimos ajuda aqui
    @staticmethod
    def should_exit(evt):
        # type: (pygame.event.EventType) -> bool
        return evt.type == QUIT or (evt.type == KEYUP and evt.key == K_ESCAPE)

    def verifica_entrada(self):
        self.keys = key.get_pressed()
        for e in event.get():
            if self.should_exit(e):
                sys.exit()
            if e.type == KEYDOWN:
                if e.key == K_SPACE:
                    if len(self.bullets) == 0 and self.naveAtiva:
                        if self.score < 1000:       # Se voce atinge uma pontuacao maior que mil pontos, vc ganha tiros duplos
                            bullet = Tiro(self.player.rect.x + 23, self.player.rect.y + 5, -1, 15, 'laser', 'center')
                            self.bullets.add(bullet)
                            self.allSprites.add(self.bullets)
                            self.sounds['shoot'].play()
                        else:
                            leftbullet = Tiro(self.player.rect.x + 8, self.player.rect.y + 5, -1, 15, 'laser', 'left')
                            rightbullet = Tiro(self.player.rect.x + 38, self.player.rect.y + 5, -1, 15, 'laser', 'right')
                            self.bullets.add(leftbullet)
                            self.bullets.add(rightbullet)
                            self.allSprites.add(self.bullets)
                            self.sounds['shoot2'].play()

    def construi_inimigos(self):
        enemies = GrupoInimigos(10, 5)
        for linha in range(5):
            for coluna in range(10):
                inimigo = Inimigo(linha, coluna)
                inimigo.rect.x = 157 + (coluna * 50)
                inimigo.rect.y = self.inimigoPosition + (linha * 45)
                enemies.add(inimigo)

        self.enemies = enemies

    def construi_inimigos_tiro(self):
        if (time.get_ticks() - self.timer) > 700 and self.enemies:
            inimigo = self.enemies.random_bottom()
            self.inimigoTiros.add(Tiro(inimigo.rect.x + 14, inimigo.rect.y + 20, 1, 5, 'inimigolaser', 'center'))
            self.allSprites.add(self.inimigoTiros)
            self.timer = time.get_ticks()

    def calcula_pontuacao(self, linha):
        scores = {0: 30, 1: 20, 2: 20, 3: 10, 4: 10,5: choice([50, 100, 150, 300])}

        score = scores[linha]
        self.score += score
        return score

    def cria_menu_principal(self):
        self.inimigo1 = header.IMAGES['inimigo3_1']
        self.inimigo1 = transform.scale(self.inimigo1, (40, 40))
        self.inimigo2 = header.IMAGES['inimigo2_2']
        self.inimigo2 = transform.scale(self.inimigo2, (40, 40))
        self.inimigo3 = header.IMAGES['inimigo1_2']
        self.inimigo3 = transform.scale(self.inimigo3, (40, 40))
        self.inimigo4 = header.IMAGES['mystery']
        self.inimigo4 = transform.scale(self.inimigo4, (80, 40))
        self.tela.blit(self.inimigo1, (318, 270))
        self.tela.blit(self.inimigo2, (318, 320))
        self.tela.blit(self.inimigo3, (318, 370))
        self.tela.blit(self.inimigo4, (299, 420))


